#!/bin/bash

# Release automation script
# This script helps create new version tags by bumping major, minor, or patch versions

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
BUMP_TYPE=""
SKIP_CONFIRMATION=false

# Function to display usage
usage() {
    echo "Usage: $0 [--major|--minor|--patch] [--yes]"
    echo ""
    echo "Options:"
    echo "  --major    Bump major version (X.y.z -> X+1.0.0)"
    echo "  --minor    Bump minor version (x.Y.z -> x.Y+1.0)"
    echo "  --patch    Bump patch version (x.y.Z -> x.y.Z+1)"
    echo "  --yes      Skip confirmation prompts"
    echo "  --help     Show this help message"
    echo ""
    echo "If no bump type is specified, you will be prompted to choose."
}

# Function to get the latest version tag
get_latest_version() {
    git tag --list 'v*.*.*' --sort=-version:refname | head -1
}

# Function to parse version components
parse_version() {
    local version="$1"
    version=${version#v}
    IFS='.' read -r major minor patch <<<"$version"

    if ! [[ "$major" =~ ^[0-9]+$ ]] || ! [[ "$minor" =~ ^[0-9]+$ ]] || ! [[ "$patch" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Invalid version format: $1${NC}" >&2
        echo "Expected format: vX.Y.Z where X, Y, Z are numbers" >&2
        exit 1
    fi

    echo "$major $minor $patch"
}

# Function to calculate bumped version
calculate_bumped_version() {
    local major="$1"
    local minor="$2"
    local patch="$3"
    local bump_type="$4"

    case "$bump_type" in
    "major")
        major=$((major + 1))
        minor=0
        patch=0
        ;;
    "minor")
        minor=$((minor + 1))
        patch=0
        ;;
    "patch")
        patch=$((patch + 1))
        ;;
    *)
        echo -e "${RED}‚ùå Invalid bump type: $bump_type${NC}" >&2
        exit 1
        ;;
    esac

    echo "v$major.$minor.$patch"
}

# Function to prompt for bump type and return the new version
prompt_for_bump_type() {
    local current_version="$1"
    local major="$2"
    local minor="$3"
    local patch="$4"

    # Calculate what each bump would result in
    local patch_version=$(calculate_bumped_version "$major" "$minor" "$patch" "patch")
    local minor_version=$(calculate_bumped_version "$major" "$minor" "$patch" "minor")
    local major_version=$(calculate_bumped_version "$major" "$minor" "$patch" "major")

    echo -e "${BLUE}Which version part should we bump from ${GREEN}$current_version${BLUE}:${NC}" >&2
    echo -e "1. Patch: ${GREEN}$patch_version${NC} (p)" >&2
    echo -e "2. Minor: ${GREEN}$minor_version${NC} (n)" >&2
    echo -e "3. Major: ${GREEN}$major_version${NC} (j)" >&2
    echo "" >&2

    local choice
    read -p "Enter choice (1/2/3 or p/n/j): " choice </dev/tty
    echo >&2 # Add newline after input

    case $choice in
    1 | p | P) echo "patch" ;;
    2 | n | N) echo "minor" ;;
    3 | j | J) echo "major" ;;
    *)
        echo -e "${YELLOW}‚ùå Cancelled by user${NC}" >&2
        exit 1
        ;;
    esac
}

# Function to get new version (handles both CLI flags and interactive prompts)
get_new_version() {
    local latest_version="$1"

    # Parse current version
    read -r major minor patch <<<"$(parse_version "$latest_version")"

    # Determine bump type
    local bump_type="$BUMP_TYPE"
    if [ -z "$bump_type" ]; then
        bump_type=$(prompt_for_bump_type "$latest_version" "$major" "$minor" "$patch")
    fi

    # Calculate and return new version
    calculate_bumped_version "$major" "$minor" "$patch" "$bump_type"
}

# Function to confirm action
confirm() {
    local message="$1"
    if [ "$SKIP_CONFIRMATION" = true ]; then
        return 0
    fi

    echo -e "${YELLOW}$message${NC}" >&2
    local reply
    read -p "Continue? (y/N): " reply </dev/tty
    echo >&2
    if [[ ! $reply =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚ùå Cancelled by user${NC}" >&2
        exit 1
    fi
}

# Function to create and push the version tag
bump_and_push() {
    local new_version="$1"

    echo -e "${BLUE}üìà Bumping version to ${GREEN}$new_version${NC}"

    # Confirm the new version
    confirm "üöÄ Create and push tag $new_version?"

    # Create the tag
    echo -e "${BLUE}üè∑Ô∏è  Creating tag $new_version...${NC}"
    git tag -a "$new_version" -m "Release $new_version"
    echo -e "${GREEN}‚úÖ Git tag created $new_version${NC}"

    # Push the tag
    echo -e "${BLUE}üì§ Pushing tag to remote...${NC}"
    git push origin "$new_version"
    echo -e "${GREEN}‚úÖ Tag pushed${NC}"

    # Success message
    echo ""
    echo -e "${GREEN}üéâ Successfully created and pushed tag $new_version!${NC}"
    echo -e "${BLUE}üéâ GitHub Actions will now build and release version $new_version${NC}"
    echo ""
    echo -e "${YELLOW}üí° You can monitor the release at:${NC}"
    echo -e "   https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^.]*\).*/\1/')/actions"
}

# MAIN SCRIPT EXECUTION

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --major)
        BUMP_TYPE="major"
        shift
        ;;
    --minor)
        BUMP_TYPE="minor"
        shift
        ;;
    --patch)
        BUMP_TYPE="patch"
        shift
        ;;
    --yes)
        SKIP_CONFIRMATION=true
        shift
        ;;
    --help)
        usage
        exit 0
        ;;
    *)
        echo -e "${RED}‚ùå Unknown option: $1${NC}" >&2
        usage
        exit 1
        ;;
    esac
done

# Pre-flight checks
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Not in a git repository${NC}" >&2
    exit 1
fi

if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}‚ùå You have uncommitted changes. Please commit or stash them first.${NC}" >&2
    git status --porcelain >&2
    exit 1
fi

# Branch check
current_branch=$(git branch --show-current)
if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
    confirm "‚ö†Ô∏è  You're on branch '$current_branch', not 'main'/'master'. This is unusual for releases."
fi

# Fetch latest version
echo -e "${BLUE}üîÑ Fetching latest tags from remote...${NC}"
git fetch --tags

latest_version=$(get_latest_version)
if [ -z "$latest_version" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No existing version tags found. Starting from v0.0.0${NC}"
    latest_version="v0.0.0"
fi

echo -e "${BLUE}üìã Current latest version: ${GREEN}$latest_version${NC}"
echo ""

# Get the new version (either from flags or user prompt)
new_version=$(get_new_version "$latest_version")

# Create and push the tag
bump_and_push "$new_version"
