nanodoc is a minimalist document bundler that scales down.


1. Why nanodoc?

    Most projects have code-related documentation (like JavaDoc or Python's
docstrings) and user-facing documents. The former lives next to the code, but
the latter is often treated as a separate entity, living somewhere else in the
repository or even in a different one.

    This separation is far from ideal. It creates friction for developers, who
must remember to check and update documentation in a different context. As code
evolves, documentation often gets left behind.

    Just as collocating source code docs makes them easier to maintain, the same
is true for other forms of documentation: domain knowledge, design decisions,
architecture maps, and more.


2. Focused and Collocated Information

    nanodoc encourages a different approach: instead of large, monolithic
documents, you can maintain small, focused text or markdown files throughout
your codebase. These documentation "fragments" are collocated with the code
they describe.

    This locality makes documentation easier to find, consult, and update.
However, there is still immense value in bundling these fragments into cohesive
documents. That's where nanodoc shines.


3. Meet nanodoc

    nanodoc is a simple yet powerful tool for stitching documentation fragments
together. It's designed to be intuitive, with no complex commands to learn. You
pass it the files you want to bundle, and it generates a single, cohesive
output.

This command will concatenate both files:

    $ nanodoc formats/json/about.doc.txt formats/yaml/about.doc.txt

So far, so good, but `cat` could do that. nanodoc's power comes from its
additional features. You can specify line ranges to extract only the most
relevant parts of a file:

    $ nanodoc formats/json/about.doc.txt:10-30
    $ nanodoc formats/yaml/about.doc.txt:4-10,15-30,40

In the example above, the YAML documentation will include multiple sections,
including a single line (L40).

You can add file headers and a table of contents to improve readability:

    $ nanodoc --filenames --toc formats/json/json.doc.txt formats/yaml/yaml.doc.txt

Of course, you can also bundle all supported files in a directory. By default,
nanodoc processes `.txt` and `.md` files:

    $ nanodoc formats/

You can easily extend this to include other file types:

    $ nanodoc formats/ --ext rst --ext go

The `--include` and `--exclude` options give you finer control over which files
are selected, using glob patterns:

    $ nanodoc src/ --ext go --include "**/http/*.go" --exclude "**/*_test.go"

    Great! We've seen how nanodoc helps craft useful views from scattered
fragments. But remembering these commands can be tedious.


4. Reusable Bundles

    Bundles are the heart of nanodoc's reusability. A bundle is a simple text
file that captures the recipe for creating a document—what to include and how
to format it.

    Here’s a sample bundle file:

    # This is a comment.
    # Options are specified at the top.
    --toc
    --linenum file

    # Paths and patterns follow.
    docs/intro.txt
    docs/design.txt:20-200
    src/**/*.go

    Note that paths in bundles use the exact same syntax as command-line
arguments, including line ranges and glob patterns.

    Bundles give you a predictable and automated way to generate and update
documents as their underlying fragments change.

    While you can write a bundle by hand, it's easier to have nanodoc generate
it for you. Once you are happy with the output of a command, just add the
`--save-to-bundle` flag:

    $ nanodoc src/ --ext go --toc --save-to-bundle api-docs.bundle.txt

    This creates `api-docs.bundle.txt`, which you can then run with:

    $ nanodoc api-docs.bundle.txt

    Now you can version this bundle alongside your code, ensuring that your
documentation always stays in sync.