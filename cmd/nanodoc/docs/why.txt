																Why Nanodoc Exists

1. The Problem Space
--------------------

	Most software projects end up with information scattered across multiple files: README files, design documents, code comments, API documentation, troubleshooting guides, deployment notes. When you need to understand a system or create documentation for a specific purpose, you're constantly switching between files, copying and pasting sections, and losing context.

	This becomes particularly painful in several common scenarios:

	1. Onboarding Documentation: You need to create a single document that walks someone through the codebase, but the relevant information is spread across the README, architecture docs, and key source files.
	2. Context Preparation: Before a code review or design discussion, you want to bundle relevant files into a single view to provide context without overwhelming participants.
	3. Prompt Engineering: When working with AI coding assistants, you often need to provide multiple files as context, but most tools don't handle this efficiently.
	4. Investigation Notes: During debugging or research, you're pulling together information from multiple sources and want to create a coherent narrative.
	5. Living Documentation: You want to create composite documents that automatically include current content from source files, so your documentation stays in sync.

2. The Current Solutions Problem
--------------------------------

	Existing documentation tools tend to fall into two camps:

	Heavy Documentation Systems: Tools like Sphinx, GitBook, or Confluence require significant setup, learning curves, and ongoing maintenance. They're designed for comprehensive documentation sites, not quick bundling tasks.

	Manual Copy-Paste: Most engineers resort to manually copying content between files, which is time-consuming, error-prone, and creates stale copies that diverge from source material.

	Neither approach handles the simple case well: "I need to quickly combine these specific files and sections into a single readable document."

3. What Nanodoc Does Differently
--------------------------------

	Nanodoc is designed around a single principle: combining text files should be as simple as listing them. No configuration files, no learning curve, no setup overhead.

	The core insight is that most file bundling needs can be expressed as:
		- These files, in this order
		- Maybe some specific sections from those files
		- With minimal formatting to make the result readable

	Three key features make this practical:
		1. Bundle Files: Text files that list other files to include. You can version-control these alongside your code and treat them as lightweight documentation specifications.
		2. Live Bundles: Documents that mix your own text with file inclusions. This lets you create narratives around code without copying the code itself.
		3. Line Range Selection: Extract specific sections from files (e.g., `file.txt:L10-20`) so you can include only relevant parts.

4. Practical Use Cases
----------------------

	- Code Review Preparation: Create a bundle that includes the main files being changed plus relevant documentation, giving reviewers full context in a single document.
	- Architecture Discussions: Combine the current design documents with key implementation files to show how decisions are actually reflected in code.
	- Debugging Sessions: Bundle error logs, relevant source files, and configuration files into a single view for easier analysis.
	- AI Assistant Context: Quickly provide multiple files as context to coding assistants without manual copying or dealing with file upload interfaces.
	- Team Knowledge Sharing: Create focused bundles for specific topics (e.g., "authentication flow") that combine documentation, code, and examples in a logical reading order.
	- Release Documentation: Automatically generate release notes that include current README content, changelog sections, and migration guides.

5. Design Philosophy
--------------------

	Nanodoc follows Unix philosophy: do one thing well. It's not trying to replace comprehensive documentation systems or become a content management platform.

	The tool assumes you already have text files (documentation, source code, configuration) and you just want to combine them intelligently. It doesn't impose any structure on your project or require you to change how you write documentation.

	This constraint is deliberate. By staying minimal, the tool remains useful across different projects, languages, and workflows without requiring adaptation or configuration.

6. When Nanodoc Makes Sense
---------------------------

	Nanodoc is most valuable when:
		- You frequently need to create composite documents from existing files
		- You want documentation that automatically stays current with source files
		- You need to provide file context to AI tools or team members
		- You prefer simple, scriptable tools over complex documentation platforms
		- You're working with plain text files (documentation, source code, configuration)

7. When It Doesn't
-------------------

	Nanodoc isn't the right choice if:
		- You need rich formatting, images, or complex layouts
		- Your primary need is API documentation generation from code

	The tool is intentionally limited to text file manipulation. It won't solve broader documentation architecture problems, but it will handle the common case of "combine these files into something readable" with minimal friction.