BUNDLES IN NANODOC

Bundles are a powerful feature in nanodoc that allow you to create reusable document specifications. There are two types of bundles: traditional bundles and live bundles.


Traditional Bundles

Traditional bundle files (.bundle.* extension) contain lists of file paths and optional formatting options. They are perfect for creating reproducible document sets with consistent formatting.


Basic Bundle Syntax

    -- 
        # My Project Documentation Bundle
        # Lines starting with '#' are comments. Empty lines are ignored.

        # --- Options ---
        --toc
        --linenum global
        --file-style nice
        --file-numbering roman
        --theme classic-dark

        # --- Content ---
        README.md
        docs/api.md
        src/main.go
    --


Supported Options

All formatting options are supported in bundle files:

    - --toc - Generate a table of contents
    - --linenum <mode> or -l <mode> - Enable line numbering (file or global)
    - --theme <name> - Set the theme (classic, classic-dark, classic-light)
    - --file-style <style> - Set filename display style (nice, filename, path)
    - --file-numbering <style> - Set file numbering style (numerical, alphabetical, roman)
    - --filenames=false - Hide file headers (default: true)
    - --ext <ext> - Additional file extensions to treat as text
    - --include <pattern> - Include only files matching patterns
    - --exclude <pattern> - Exclude files matching patterns


Precedence Rules

Command-line options always override bundle options:

    1. Command-line explicit: If you explicitly set a flag on the command line, it takes precedence
    2. Bundle default: If you don't set a flag on the command line, the bundle option is used
    3. System default: If neither command-line nor bundle specifies an option, the system default is used


Example: Development vs Production Bundles

dev.bundle.txt:
    -- 
        --linenum file
        --file-style path
        --theme classic

        src/
        tests/
    --

release.bundle.txt:
    -- 
        --toc
        --linenum global
        --file-numbering alphabetical
        --theme classic-dark
        --filenames=false

        README.md
        CHANGELOG.md
        docs/
    --


Live Bundles

Live bundles allow you to create documents that seamlessly integrate content from multiple files with your own text. Unlike traditional bundles, live bundles mix narrative text with file inclusions.


Key Differences from Traditional Bundles

Traditional bundles:
    - Contain only file paths and options
    - Each file is processed separately with its own title
    - Clear visual separation between files

Live bundles:
    - Can mix text and file paths
    - File paths are replaced with their content inline
    - No file titles or line number resets at file boundaries
    - Seamless integration of content


Creating a Live Bundle

Any text file can be a live bundle. Simply include file paths on their own lines:

    -- 
        Introduction to my document

        /path/to/chapter1.txt

        This text will appear between chapters

        /path/to/chapter2.txt

        Conclusion
    --


Inline File Inclusion

Live bundles support inline file inclusion using the [[file:path]] syntax:

    -- 
        This paragraph includes [[file:/path/to/quote.txt]] right in the middle of the text.
    --

The file content is inserted inline without line breaks, perfect for short snippets within paragraphs.

You can also use line references:
    -- 
        The most important part is [[file:document.txt:L42-45]] as shown here.
    --


Line References

Both full-line and inline inclusions support line references:

    -- 
        Introduction

        /path/to/file.txt:L10-20

        Middle section with inline reference: [[file:/path/to/file.txt:L50-60]]

        /path/to/file.txt:L100-$1
    --


Bundle File Patterns


Include/Exclude Patterns

Bundle files can specify include and exclude patterns:

    -- 
        # Include only Go source files, exclude tests
        --include "**/*.go"
        --exclude "**/*_test.go"

        src/
        pkg/
    --


Circular Dependencies

Nanodoc detects and prevents circular dependencies in bundles:
    - Bundle A cannot include Bundle B if Bundle B includes Bundle A
    - Live bundles cannot have circular [[file:]] references
    - Clear error messages show the dependency chain


Best Practices

    1. Traditional Bundles:
       - Use .bundle.txt extension for clarity
       - Group options at the top of the file
       - Document your options with comments
       - Version your bundles alongside your code

    2. Live Bundles:
       - Keep file paths on their own lines for clarity
       - Use relative paths for portability
       - Use inline inclusion for short snippets
       - Test bundles to ensure paths resolve correctly

    3. General:
       - Choose traditional bundles for formal documentation sets
       - Choose live bundles for narrative documents with examples
       - Consider using line references to include only relevant parts
       - Use descriptive names for your bundle files


Example Use Cases


Traditional Bundles
    - Project documentation sets with consistent formatting
    - Release documentation with specific themes
    - Code review bundles with line numbers
    - API documentation with table of contents


Live Bundles
    - Tutorials with inline code examples
    - Composite documents with commentary
    - Prompt templates with dynamic content
    - Documentation with narrative flow


Troubleshooting


Bundle Options Not Applied
    - Ensure file follows .bundle.* pattern for traditional bundles
    - Check option syntax matches command-line flags
    - Remember command-line flags override bundle options


File Not Found
    - Check relative vs absolute paths
    - Ensure files exist at specified locations
    - Use --dry-run to preview what will be processed


Circular Dependencies
    - Review the error message showing the dependency chain
    - Remove the circular reference
    - Consider restructuring your bundles


OPTIONS

Bundle files can include formatting options that apply to the entire bundle. Options use the same syntax as command-line flags:


Supported Options in Bundles

    --toc                      Generate a table of contents
    --linenum <mode>, -l       Enable line numbering (file or global)
    --theme <name>             Set theme (classic, classic-dark, classic-light)
    --file-style <style>       Set filename display style (nice, filename, path)
    --file-numbering <style>   Set file numbering style (numerical, alphabetical, roman)
    --filenames[=bool]         Show/hide file headers (default: true)
    --ext <ext>                Additional file extensions to treat as text
    --include <pattern>        Include only files matching patterns
    --exclude <pattern>        Exclude files matching patterns


Precedence

    1. Command-line flags (highest priority)
    2. Bundle file options
    3. System defaults (lowest priority)

Example: If bundle contains --theme dark but you run nanodoc --theme light bundle.txt, the light theme wins because command-line flags override bundle options.