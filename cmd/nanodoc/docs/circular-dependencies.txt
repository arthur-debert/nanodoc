CIRCULAR DEPENDENCIES IN NANODOC
================================

This document explains how nanodoc handles circular dependencies in both bundle files and live bundles.

WHAT ARE CIRCULAR DEPENDENCIES?
-------------------------------

A circular dependency occurs when files reference each other in a loop, creating an infinite inclusion cycle. For example, if `fileA.txt` includes `fileB.txt`, and `fileB.txt` includes `fileA.txt`, the program would be stuck in an infinite loop.

DETECTION MECHANISM
-------------------

Nanodoc has built-in detection to prevent infinite loops from circular references.

1.  Bundle Files (`.bundle.*`):
    When processing bundle files, nanodoc maintains a list of visited absolute file paths for the current processing chain. If it encounters a bundle that is already in the visited list for that chain, it halts and reports a circular dependency.

2.  Live Bundles (`[[file:]]`):
    A similar mechanism applies to live bundles. Nanodoc tracks the chain of included files within a single processing session. If a file attempts to include another file that is already part of the current inclusion chain, the process is stopped.

3.  Depth Limit:
    As a failsafe, live bundles also have a maximum nesting depth of 10 levels. This prevents stack overflow errors that could result from extremely deep (but not necessarily circular) inclusions.

EXAMPLES OF CIRCULAR DEPENDENCIES
---------------------------------

### Two-File Cycle

    # file1.bundle.txt
    file2.bundle.txt

    # file2.bundle.txt
    file1.bundle.txt

### Live Bundle Cycle

    # doc1.txt
    Content from doc1.
    [[file:doc2.txt]]

    # doc2.txt
    Content from doc2.
    [[file:doc1.txt]]

### Self-Reference

    # recursive.bundle.txt
    recursive.bundle.txt

ERROR MESSAGES
--------------

When a circular dependency is detected, nanodoc reports a clear error that includes the file that triggered the error and the dependency chain that formed the cycle.

Example:
    Error: circular dependency detected in /path/to/a.bundle.txt. Chain: [a.bundle.txt, b.bundle.txt, a.bundle.txt]

VALID PATTERNS (NOT CIRCULAR)
-----------------------------

### Diamond Pattern

It is valid for multiple files to include the same shared file. This is not a circular dependency because there is no looping reference chain.

    # top.bundle.txt
    left.bundle.txt
    right.bundle.txt

    # left.bundle.txt
    shared.txt

    # right.bundle.txt
    shared.txt

In this case, `shared.txt` is simply included twice. Nanodoc handles this without issue.
