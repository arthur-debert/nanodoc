Bundle Options in Nanodoc
========================

As of issue #17, bundle files can now store nanodoc processing options directly within the bundle file itself. This allows you to create predictable and consistent output by defining both the content and formatting options in a single file.

## Overview

Bundle options allow you to specify command-line flags directly within bundle files. This means you can run `nanodoc bundle.txt` and get a predictable output every time, without having to remember all the formatting options.

## Syntax

Bundle options use the exact same syntax as command-line flags. Any line in a bundle file that starts with `-` or `--` is treated as a command-line option.

### Example Bundle File

```
# My Project Documentation Bundle
#
# This bundle defines both formatting options and the content to include.
# Lines starting with '#' are comments. Empty lines are ignored.

# --- Options ---
# Options are specified using the same flags as the command line.

--toc
--global-line-numbers
--header-style nice
--sequence roman
--theme classic-dark

# --- Content ---
# Files, directories, and glob patterns are listed below.

README.md
docs/
pkg/nanodoc/*.go
```

## Supported Options

All command-line options are supported in bundle files:

### Table of Contents
- `--toc` - Generate a table of contents

### Line Numbering
- `--line-numbers` or `-n` - Enable per-file line numbering
- `--global-line-numbers` or `-N` - Enable global line numbering

### Headers
- `--no-header` - Suppress file headers
- `--header-style <style>` - Set header style (nice, filename, path)
- `--sequence <style>` - Set sequence style (numerical, letter, roman)

### Theming
- `--theme <name>` - Set theme (classic, classic-dark, classic-light)

### File Handling
- `--txt-ext <ext>` - Additional file extensions to process

## Precedence Rules

To ensure predictable behavior, command-line arguments always override options set in bundle files:

1. **Explicitly set command-line options** take highest precedence
2. **Bundle file options** are used when command-line options are not explicitly set
3. **Default values** are used when neither bundle nor command-line options are set

### Example

If a bundle file contains `--theme classic-dark` but you run:
```bash
nanodoc --theme classic-light my_bundle.txt
```

The `classic-light` theme will be used because the command-line option overrides the bundle option.

## Benefits

1. **Consistency** - Same output every time you run the bundle
2. **Simplicity** - No need to remember complex command-line options
3. **Shareability** - Bundle files can be shared with team members
4. **Flexibility** - Can still override options when needed

## Common Use Cases

### Project Documentation
```
# project-docs.bundle.txt
--toc
--theme classic-dark
--header-style nice
--sequence roman

README.md
docs/architecture.md
docs/api.md
```

### Code Review Bundle
```
# review.bundle.txt
--line-numbers
--header-style path
--no-header

src/main.go:L50-100
src/utils.go:L20-40
```

### Team Onboarding
```
# onboarding.bundle.txt
--toc
--theme classic-light
--header-style nice

docs/welcome.md
docs/setup.md
docs/coding-standards.md
```

## Implementation Details

Bundle options are parsed using the same logic as command-line parsing, ensuring consistency between the two interfaces. The feature supports:

- Comments and empty lines (ignored)
- All existing command-line flags
- Proper precedence handling
- Error reporting for invalid options

## Error Handling

If a bundle file contains invalid options, nanodoc will report a clear error message indicating:
- The bundle file path
- The line number with the error
- The specific issue with the option

Example error:
```
Error: error parsing option on line 10: --theme requires a value
```
