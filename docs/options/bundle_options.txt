Bundle Options in Nanodoc
========================

Bundle files can now store nanodoc processing options directly within the file,
allowing for predictable and consistent output when processing bundles.

OVERVIEW
--------

Bundle files support embedding command-line options alongside file paths.
This allows you to create self-contained bundle files that include both
the content to process and the formatting options to apply.

SYNTAX
------

Options are specified using the same flags as the command line:
- Lines starting with '--' are treated as command-line options
- Lines starting with '-' are treated as short command-line options
- All other lines (except comments) are treated as file paths

Example bundle file:

```
# My Project Documentation Bundle
# This bundle defines both formatting options and content

# --- Options ---
--toc
--global-line-numbers
--header-style nice
--sequence roman
--theme classic-dark
--txt-ext go
--txt-ext py

# --- Content ---
README.md
src/main.go
docs/api.md
```

SUPPORTED OPTIONS
-----------------

The following command-line options can be embedded in bundle files:

Content Generation:
  --toc                    Generate table of contents
  
Line Numbering:
  --line-numbers / -n      Enable per-file line numbering
  --global-line-numbers / -N  Enable global line numbering
  
Headers:
  --no-header              Suppress file headers
  --header-style STYLE     Set header style (nice, filename, path)
  --sequence STYLE         Set sequence style (numerical, letter, roman)
  
Theming:
  --theme NAME             Set theme (classic, classic-light, classic-dark)
  
File Processing:
  --txt-ext EXTENSION      Add file extension to process as text
                           (can be specified multiple times)

PRECEDENCE RULES
----------------

Command-line options always override bundle options. This allows:
- Bundle files to define standard, reproducible output
- Users to make ad-hoc adjustments from the command line

Example:
```bash
# Bundle contains --theme classic-dark
# Command line specifies different theme
nanodoc --theme classic-light my-bundle.bundle.txt
# Result: classic-light theme is used (command line wins)
```

USAGE EXAMPLES
--------------

1. Simple bundle with basic options:
```
# Basic documentation bundle
--toc
--line-numbers
--header-style filename

README.md
CHANGELOG.md
```

2. Advanced bundle with multiple options:
```
# Comprehensive project documentation
--toc
--global-line-numbers
--header-style nice
--sequence roman
--theme classic-dark
--txt-ext go
--txt-ext py
--txt-ext js

# Project overview
README.md
LICENSE

# Source code
src/main.go
src/utils.py
frontend/app.js

# Documentation
docs/api.md
docs/guide.md
```

3. Code documentation bundle:
```
# Source code documentation
--no-header
--line-numbers
--theme classic-light
--txt-ext go
--txt-ext mod

# Go source files
*.go
go.mod
go.sum
```

BEST PRACTICES
--------------

1. **Group options at the top**: Place all options before file paths for clarity
2. **Use comments**: Document what each section does
3. **Consistent naming**: Use descriptive names like `project.bundle.txt`
4. **Version control**: Include bundle files in version control for team consistency
5. **Test bundle files**: Use `--dry-run` to preview what will be processed

INTEGRATION WITH EXISTING FEATURES
-----------------------------------

Bundle options work seamlessly with:
- Nested bundle inclusion
- Circular dependency detection
- Live bundle processing
- Directory and glob pattern processing

TROUBLESHOOTING
---------------

Common issues and solutions:

1. **Option not recognized**: Ensure the option is spelled correctly and supported
2. **Option not applied**: Check that command-line options aren't overriding bundle options
3. **Syntax errors**: Verify options start with '--' or '-' and have correct values
4. **Multiple values**: Use multiple lines for options that accept multiple values (like --txt-ext)

Example error:
```
Error: error parsing option on line 5: unknown option: --invalid-option
```

MIGRATION FROM COMMAND LINE
----------------------------

To convert command-line usage to bundle files:

Before:
```bash
nanodoc --toc --theme classic-dark --line-numbers README.md src/*.go
```

After:
```
# Create bundle file
echo "# Project bundle
--toc
--theme classic-dark
--line-numbers
--txt-ext go

README.md
src/" > project.bundle.txt

# Use bundle
nanodoc project.bundle.txt
```
