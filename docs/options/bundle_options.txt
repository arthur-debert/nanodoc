Bundle Options in Nanodoc
========================

Bundle files in nanodoc can store processing options alongside file paths, allowing you to 
define consistent, reproducible output settings that travel with your content.

Overview
--------

Bundle options allow you to specify command-line flags directly within bundle files.
This means you can run `nanodoc bundle.txt` and get predictable output without 
needing to remember complex command-line combinations.

Syntax
------

Bundle options use the same syntax as command-line flags:

```
# My Project Documentation Bundle
#
# This bundle defines both formatting options and the content to include.
# Lines starting with '#' are comments. Empty lines are ignored.

# --- Options ---
# Options are specified using the same flags as the command line.

--toc
--global-line-numbers
--header-style nice
--sequence roman
--theme classic-dark

# --- Content ---
# Files, directories, and glob patterns are listed below.

README.md
docs/
pkg/nanodoc/*.go
```

Supported Options
----------------

All major command-line options are supported in bundle files:

**Table of Contents:**
- `--toc` - Generate table of contents

**Line Numbering:**
- `--line-numbers` or `-n` - Per-file line numbering
- `--global-line-numbers` or `-N` - Global line numbering

**Headers:**
- `--no-header` - Suppress file headers
- `--header-style <style>` - Header style (nice, filename, path)
- `--sequence <style>` - Sequence numbering (numerical, letter, roman)

**Theming:**
- `--theme <name>` - Theme name (classic, classic-light, classic-dark)

**File Handling:**
- `--txt-ext <ext>` - Additional file extensions to process

Precedence Rules
---------------

Command-line options always override bundle options. This allows you to:

1. Define standard settings in the bundle file
2. Override them from the command line when needed

Example:
```bash
# Uses bundle settings
nanodoc project.bundle.txt

# Overrides bundle theme with classic-light
nanodoc --theme classic-light project.bundle.txt

# Overrides bundle line numbering with per-file
nanodoc --line-numbers project.bundle.txt
```

Parsing Rules
------------

1. Lines starting with `#` are treated as comments
2. Empty lines are ignored
3. Lines starting with `-` or `--` are treated as options
4. All other lines are treated as file paths
5. Options are processed before file paths
6. Multiple values for the same option (like `--txt-ext`) are accumulated

Examples
--------

### Basic Bundle with Options

```
# Simple documentation bundle
--toc
--theme classic-dark

README.md
docs/getting-started.md
docs/api.md
```

### Advanced Bundle with Multiple Options

```
# Comprehensive project documentation
--toc
--global-line-numbers
--header-style nice
--sequence roman
--theme classic-dark
--txt-ext go
--txt-ext py
--txt-ext js

# Core documentation
README.md
CHANGELOG.md

# API documentation
docs/api/

# Source code examples
examples/*.go
src/*.py
```

### Bundle with Complex File Patterns

```
# Full project bundle
--toc
--header-style path
--sequence letter

# Documentation
README.md
docs/

# Source code
src/main.go
src/utils/
pkg/*/

# Configuration
config/*.yaml
```

Error Handling
--------------

Bundle option parsing will fail if:

1. An unknown option is specified
2. A required option value is missing (e.g., `--theme` without a theme name)
3. An option is malformed

When an error occurs, nanodoc will report the specific line number and error details.

Integration with Other Features
------------------------------

Bundle options work seamlessly with:

- **Nested bundles**: Child bundles inherit and can override parent options
- **Live bundles**: Options apply to the entire document including inlined content
- **Dry run mode**: `--dry-run` shows which options would be applied
- **Circular dependency detection**: Works with option parsing

Best Practices
--------------

1. **Group options at the top** of the bundle file for clarity
2. **Use comments** to document why specific options are chosen
3. **Test bundles** with `--dry-run` to verify settings
4. **Keep options simple** - avoid overly complex configurations
5. **Use consistent naming** for related bundle files
6. **Document precedence** when using nested bundles

Troubleshooting
--------------

**Bundle options not taking effect:**
- Verify the bundle file uses the `.bundle.` naming pattern
- Check that options are specified correctly (start with `-` or `--`)
- Ensure no typos in option names

**CLI options not overriding bundle options:**
- This is expected behavior - CLI options always take precedence
- Use `--dry-run` to see the final merged options

**Option parsing errors:**
- Check the line number mentioned in the error
- Verify option syntax matches command-line format
- Ensure required values are provided for options that need them
